pipeline {
    agent any

    tools {
        jdk 'jdk11'                // Use JDK 11 or any version needed for your build
        sonar 'sonar-cube'          // SonarScanner for MSBuild, make sure the name matches the one in Global Tool Configuration
    }

    environment {
        SONARQUBE_SERVER = 'sonar-cube'  // SonarQube server name configured in Jenkins
        SONARQUBE_TOKEN = credentials('sqp_030c709283c3d9f38f0969989c331e642b0e988f') // SonarQube token added in Jenkins credentials
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the source code from the repository
                checkout scm
            }
        }

        stage('Build') {
            steps {
                // Run the MSBuild build command
                sh 'dotnet build'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Run SonarQube analysis using SonarScanner for MSBuild
                withSonarQubeEnv('sonar-cube') {
                    sh 'dotnet sonarscanner begin /k:"my-dotnet-project" /d:sonar.login=$SONARQUBE_TOKEN'
                    sh 'dotnet build'
                    sh 'dotnet sonarscanner end /d:sonar.login=$SONARQUBE_TOKEN'
                }
            }
        }

        stage('Quality Gate') {
            steps {
                // Wait for SonarQube quality gate to pass
                timeout(time: 1, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }

    post {
        always {
            // Clean workspace after build
            cleanWs()
        }

        failure {
            echo 'Build failed!'
        }

        success {
            echo 'Build and SonarQube analysis successful!'
        }
    }
}
